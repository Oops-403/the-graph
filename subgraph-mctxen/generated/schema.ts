// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class RankClaimedEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RankClaimedEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RankClaimedEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("RankClaimedEntity", id.toString(), this);
    }
  }

  static load(id: string): RankClaimedEntity | null {
    return changetype<RankClaimedEntity | null>(
      store.get("RankClaimedEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction_hash(): Bytes {
    let value = this.get("transaction_hash");
    return value!.toBytes();
  }

  set transaction_hash(value: Bytes) {
    this.set("transaction_hash", Value.fromBytes(value));
  }

  get user_address(): Bytes {
    let value = this.get("user_address");
    return value!.toBytes();
  }

  set user_address(value: Bytes) {
    this.set("user_address", Value.fromBytes(value));
  }

  get contract_address(): Bytes | null {
    let value = this.get("contract_address");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set contract_address(value: Bytes | null) {
    if (!value) {
      this.unset("contract_address");
    } else {
      this.set("contract_address", Value.fromBytes(<Bytes>value));
    }
  }

  get transaction_fee(): string | null {
    let value = this.get("transaction_fee");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set transaction_fee(value: string | null) {
    if (!value) {
      this.unset("transaction_fee");
    } else {
      this.set("transaction_fee", Value.fromString(<string>value));
    }
  }
}

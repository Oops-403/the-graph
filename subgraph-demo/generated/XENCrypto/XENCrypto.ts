// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class MintClaimed extends ethereum.Event {
  get params(): MintClaimed__Params {
    return new MintClaimed__Params(this);
  }
}

export class MintClaimed__Params {
  _event: MintClaimed;

  constructor(event: MintClaimed) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get rewardAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class RankClaimed extends ethereum.Event {
  get params(): RankClaimed__Params {
    return new RankClaimed__Params(this);
  }
}

export class RankClaimed__Params {
  _event: RankClaimed;

  constructor(event: RankClaimed) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get term(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get rank(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Staked extends ethereum.Event {
  get params(): Staked__Params {
    return new Staked__Params(this);
  }
}

export class Staked__Params {
  _event: Staked;

  constructor(event: Staked) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get term(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Withdrawn extends ethereum.Event {
  get params(): Withdrawn__Params {
    return new Withdrawn__Params(this);
  }
}

export class Withdrawn__Params {
  _event: Withdrawn;

  constructor(event: Withdrawn) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get reward(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class XENCrypto__getUserMintResultValue0Struct extends ethereum.Tuple {
  get user(): Address {
    return this[0].toAddress();
  }

  get term(): BigInt {
    return this[1].toBigInt();
  }

  get maturityTs(): BigInt {
    return this[2].toBigInt();
  }

  get rank(): BigInt {
    return this[3].toBigInt();
  }

  get amplifier(): BigInt {
    return this[4].toBigInt();
  }

  get eaaRate(): BigInt {
    return this[5].toBigInt();
  }
}

export class XENCrypto__getUserStakeResultValue0Struct extends ethereum.Tuple {
  get term(): BigInt {
    return this[0].toBigInt();
  }

  get maturityTs(): BigInt {
    return this[1].toBigInt();
  }

  get amount(): BigInt {
    return this[2].toBigInt();
  }

  get apy(): BigInt {
    return this[3].toBigInt();
  }
}

export class XENCrypto__userMintsResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    return map;
  }

  getUser(): Address {
    return this.value0;
  }

  getTerm(): BigInt {
    return this.value1;
  }

  getMaturityTs(): BigInt {
    return this.value2;
  }

  getRank(): BigInt {
    return this.value3;
  }

  getAmplifier(): BigInt {
    return this.value4;
  }

  getEaaRate(): BigInt {
    return this.value5;
  }
}

export class XENCrypto__userStakesResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  getTerm(): BigInt {
    return this.value0;
  }

  getMaturityTs(): BigInt {
    return this.value1;
  }

  getAmount(): BigInt {
    return this.value2;
  }

  getApy(): BigInt {
    return this.value3;
  }
}

export class XENCrypto extends ethereum.SmartContract {
  static bind(address: Address): XENCrypto {
    return new XENCrypto("XENCrypto", address);
  }

  AUTHORS(): string {
    let result = super.call("AUTHORS", "AUTHORS():(string)", []);

    return result[0].toString();
  }

  try_AUTHORS(): ethereum.CallResult<string> {
    let result = super.tryCall("AUTHORS", "AUTHORS():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  DAYS_IN_YEAR(): BigInt {
    let result = super.call("DAYS_IN_YEAR", "DAYS_IN_YEAR():(uint256)", []);

    return result[0].toBigInt();
  }

  try_DAYS_IN_YEAR(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("DAYS_IN_YEAR", "DAYS_IN_YEAR():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  EAA_PM_START(): BigInt {
    let result = super.call("EAA_PM_START", "EAA_PM_START():(uint256)", []);

    return result[0].toBigInt();
  }

  try_EAA_PM_START(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("EAA_PM_START", "EAA_PM_START():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  EAA_PM_STEP(): BigInt {
    let result = super.call("EAA_PM_STEP", "EAA_PM_STEP():(uint256)", []);

    return result[0].toBigInt();
  }

  try_EAA_PM_STEP(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("EAA_PM_STEP", "EAA_PM_STEP():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  EAA_RANK_STEP(): BigInt {
    let result = super.call("EAA_RANK_STEP", "EAA_RANK_STEP():(uint256)", []);

    return result[0].toBigInt();
  }

  try_EAA_RANK_STEP(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "EAA_RANK_STEP",
      "EAA_RANK_STEP():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  GENESIS_RANK(): BigInt {
    let result = super.call("GENESIS_RANK", "GENESIS_RANK():(uint256)", []);

    return result[0].toBigInt();
  }

  try_GENESIS_RANK(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("GENESIS_RANK", "GENESIS_RANK():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_PENALTY_PCT(): BigInt {
    let result = super.call(
      "MAX_PENALTY_PCT",
      "MAX_PENALTY_PCT():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MAX_PENALTY_PCT(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_PENALTY_PCT",
      "MAX_PENALTY_PCT():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_TERM_END(): BigInt {
    let result = super.call("MAX_TERM_END", "MAX_TERM_END():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MAX_TERM_END(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("MAX_TERM_END", "MAX_TERM_END():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_TERM_START(): BigInt {
    let result = super.call("MAX_TERM_START", "MAX_TERM_START():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MAX_TERM_START(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_TERM_START",
      "MAX_TERM_START():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MIN_TERM(): BigInt {
    let result = super.call("MIN_TERM", "MIN_TERM():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MIN_TERM(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("MIN_TERM", "MIN_TERM():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  REWARD_AMPLIFIER_END(): BigInt {
    let result = super.call(
      "REWARD_AMPLIFIER_END",
      "REWARD_AMPLIFIER_END():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_REWARD_AMPLIFIER_END(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "REWARD_AMPLIFIER_END",
      "REWARD_AMPLIFIER_END():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  REWARD_AMPLIFIER_START(): BigInt {
    let result = super.call(
      "REWARD_AMPLIFIER_START",
      "REWARD_AMPLIFIER_START():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_REWARD_AMPLIFIER_START(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "REWARD_AMPLIFIER_START",
      "REWARD_AMPLIFIER_START():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  SECONDS_IN_DAY(): BigInt {
    let result = super.call("SECONDS_IN_DAY", "SECONDS_IN_DAY():(uint256)", []);

    return result[0].toBigInt();
  }

  try_SECONDS_IN_DAY(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "SECONDS_IN_DAY",
      "SECONDS_IN_DAY():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  TERM_AMPLIFIER(): BigInt {
    let result = super.call("TERM_AMPLIFIER", "TERM_AMPLIFIER():(uint256)", []);

    return result[0].toBigInt();
  }

  try_TERM_AMPLIFIER(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "TERM_AMPLIFIER",
      "TERM_AMPLIFIER():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  TERM_AMPLIFIER_THRESHOLD(): BigInt {
    let result = super.call(
      "TERM_AMPLIFIER_THRESHOLD",
      "TERM_AMPLIFIER_THRESHOLD():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_TERM_AMPLIFIER_THRESHOLD(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "TERM_AMPLIFIER_THRESHOLD",
      "TERM_AMPLIFIER_THRESHOLD():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  WITHDRAWAL_WINDOW_DAYS(): BigInt {
    let result = super.call(
      "WITHDRAWAL_WINDOW_DAYS",
      "WITHDRAWAL_WINDOW_DAYS():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_WITHDRAWAL_WINDOW_DAYS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "WITHDRAWAL_WINDOW_DAYS",
      "WITHDRAWAL_WINDOW_DAYS():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  XEN_APY_DAYS_STEP(): BigInt {
    let result = super.call(
      "XEN_APY_DAYS_STEP",
      "XEN_APY_DAYS_STEP():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_XEN_APY_DAYS_STEP(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "XEN_APY_DAYS_STEP",
      "XEN_APY_DAYS_STEP():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  XEN_APY_END(): BigInt {
    let result = super.call("XEN_APY_END", "XEN_APY_END():(uint256)", []);

    return result[0].toBigInt();
  }

  try_XEN_APY_END(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("XEN_APY_END", "XEN_APY_END():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  XEN_APY_START(): BigInt {
    let result = super.call("XEN_APY_START", "XEN_APY_START():(uint256)", []);

    return result[0].toBigInt();
  }

  try_XEN_APY_START(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "XEN_APY_START",
      "XEN_APY_START():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  XEN_MIN_BURN(): BigInt {
    let result = super.call("XEN_MIN_BURN", "XEN_MIN_BURN():(uint256)", []);

    return result[0].toBigInt();
  }

  try_XEN_MIN_BURN(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("XEN_MIN_BURN", "XEN_MIN_BURN():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  XEN_MIN_STAKE(): BigInt {
    let result = super.call("XEN_MIN_STAKE", "XEN_MIN_STAKE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_XEN_MIN_STAKE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "XEN_MIN_STAKE",
      "XEN_MIN_STAKE():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  activeMinters(): BigInt {
    let result = super.call("activeMinters", "activeMinters():(uint256)", []);

    return result[0].toBigInt();
  }

  try_activeMinters(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "activeMinters",
      "activeMinters():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  activeStakes(): BigInt {
    let result = super.call("activeStakes", "activeStakes():(uint256)", []);

    return result[0].toBigInt();
  }

  try_activeStakes(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("activeStakes", "activeStakes():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decreaseAllowance(spender: Address, subtractedValue: BigInt): boolean {
    let result = super.call(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    subtractedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  genesisTs(): BigInt {
    let result = super.call("genesisTs", "genesisTs():(uint256)", []);

    return result[0].toBigInt();
  }

  try_genesisTs(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("genesisTs", "genesisTs():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCurrentAMP(): BigInt {
    let result = super.call("getCurrentAMP", "getCurrentAMP():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getCurrentAMP(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCurrentAMP",
      "getCurrentAMP():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCurrentAPY(): BigInt {
    let result = super.call("getCurrentAPY", "getCurrentAPY():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getCurrentAPY(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCurrentAPY",
      "getCurrentAPY():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCurrentEAAR(): BigInt {
    let result = super.call("getCurrentEAAR", "getCurrentEAAR():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getCurrentEAAR(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCurrentEAAR",
      "getCurrentEAAR():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCurrentMaxTerm(): BigInt {
    let result = super.call(
      "getCurrentMaxTerm",
      "getCurrentMaxTerm():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getCurrentMaxTerm(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCurrentMaxTerm",
      "getCurrentMaxTerm():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getGrossReward(
    rankDelta: BigInt,
    amplifier: BigInt,
    term: BigInt,
    eaa: BigInt
  ): BigInt {
    let result = super.call(
      "getGrossReward",
      "getGrossReward(uint256,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(rankDelta),
        ethereum.Value.fromUnsignedBigInt(amplifier),
        ethereum.Value.fromUnsignedBigInt(term),
        ethereum.Value.fromUnsignedBigInt(eaa)
      ]
    );

    return result[0].toBigInt();
  }

  try_getGrossReward(
    rankDelta: BigInt,
    amplifier: BigInt,
    term: BigInt,
    eaa: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getGrossReward",
      "getGrossReward(uint256,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(rankDelta),
        ethereum.Value.fromUnsignedBigInt(amplifier),
        ethereum.Value.fromUnsignedBigInt(term),
        ethereum.Value.fromUnsignedBigInt(eaa)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUserMint(): XENCrypto__getUserMintResultValue0Struct {
    let result = super.call(
      "getUserMint",
      "getUserMint():((address,uint256,uint256,uint256,uint256,uint256))",
      []
    );

    return changetype<XENCrypto__getUserMintResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getUserMint(): ethereum.CallResult<
    XENCrypto__getUserMintResultValue0Struct
  > {
    let result = super.tryCall(
      "getUserMint",
      "getUserMint():((address,uint256,uint256,uint256,uint256,uint256))",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<XENCrypto__getUserMintResultValue0Struct>(value[0].toTuple())
    );
  }

  getUserStake(): XENCrypto__getUserStakeResultValue0Struct {
    let result = super.call(
      "getUserStake",
      "getUserStake():((uint256,uint256,uint256,uint256))",
      []
    );

    return changetype<XENCrypto__getUserStakeResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getUserStake(): ethereum.CallResult<
    XENCrypto__getUserStakeResultValue0Struct
  > {
    let result = super.tryCall(
      "getUserStake",
      "getUserStake():((uint256,uint256,uint256,uint256))",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<XENCrypto__getUserStakeResultValue0Struct>(value[0].toTuple())
    );
  }

  globalRank(): BigInt {
    let result = super.call("globalRank", "globalRank():(uint256)", []);

    return result[0].toBigInt();
  }

  try_globalRank(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("globalRank", "globalRank():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  increaseAllowance(spender: Address, addedValue: BigInt): boolean {
    let result = super.call(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    addedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalXenStaked(): BigInt {
    let result = super.call("totalXenStaked", "totalXenStaked():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalXenStaked(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalXenStaked",
      "totalXenStaked():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(to: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(to: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(from: Address, to: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    from: Address,
    to: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  userBurns(param0: Address): BigInt {
    let result = super.call("userBurns", "userBurns(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_userBurns(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("userBurns", "userBurns(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userMints(param0: Address): XENCrypto__userMintsResult {
    let result = super.call(
      "userMints",
      "userMints(address):(address,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new XENCrypto__userMintsResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt()
    );
  }

  try_userMints(
    param0: Address
  ): ethereum.CallResult<XENCrypto__userMintsResult> {
    let result = super.tryCall(
      "userMints",
      "userMints(address):(address,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new XENCrypto__userMintsResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt()
      )
    );
  }

  userStakes(param0: Address): XENCrypto__userStakesResult {
    let result = super.call(
      "userStakes",
      "userStakes(address):(uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new XENCrypto__userStakesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_userStakes(
    param0: Address
  ): ethereum.CallResult<XENCrypto__userStakesResult> {
    let result = super.tryCall(
      "userStakes",
      "userStakes(address):(uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new XENCrypto__userStakesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }
}

export class ClaimMintRewardCall extends ethereum.Call {
  get inputs(): ClaimMintRewardCall__Inputs {
    return new ClaimMintRewardCall__Inputs(this);
  }

  get outputs(): ClaimMintRewardCall__Outputs {
    return new ClaimMintRewardCall__Outputs(this);
  }
}

export class ClaimMintRewardCall__Inputs {
  _call: ClaimMintRewardCall;

  constructor(call: ClaimMintRewardCall) {
    this._call = call;
  }
}

export class ClaimMintRewardCall__Outputs {
  _call: ClaimMintRewardCall;

  constructor(call: ClaimMintRewardCall) {
    this._call = call;
  }
}

export class ClaimMintRewardAndShareCall extends ethereum.Call {
  get inputs(): ClaimMintRewardAndShareCall__Inputs {
    return new ClaimMintRewardAndShareCall__Inputs(this);
  }

  get outputs(): ClaimMintRewardAndShareCall__Outputs {
    return new ClaimMintRewardAndShareCall__Outputs(this);
  }
}

export class ClaimMintRewardAndShareCall__Inputs {
  _call: ClaimMintRewardAndShareCall;

  constructor(call: ClaimMintRewardAndShareCall) {
    this._call = call;
  }

  get other(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get pct(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ClaimMintRewardAndShareCall__Outputs {
  _call: ClaimMintRewardAndShareCall;

  constructor(call: ClaimMintRewardAndShareCall) {
    this._call = call;
  }
}

export class ClaimMintRewardAndStakeCall extends ethereum.Call {
  get inputs(): ClaimMintRewardAndStakeCall__Inputs {
    return new ClaimMintRewardAndStakeCall__Inputs(this);
  }

  get outputs(): ClaimMintRewardAndStakeCall__Outputs {
    return new ClaimMintRewardAndStakeCall__Outputs(this);
  }
}

export class ClaimMintRewardAndStakeCall__Inputs {
  _call: ClaimMintRewardAndStakeCall;

  constructor(call: ClaimMintRewardAndStakeCall) {
    this._call = call;
  }

  get pct(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get term(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ClaimMintRewardAndStakeCall__Outputs {
  _call: ClaimMintRewardAndStakeCall;

  constructor(call: ClaimMintRewardAndStakeCall) {
    this._call = call;
  }
}

export class ClaimRankCall extends ethereum.Call {
  get inputs(): ClaimRankCall__Inputs {
    return new ClaimRankCall__Inputs(this);
  }

  get outputs(): ClaimRankCall__Outputs {
    return new ClaimRankCall__Outputs(this);
  }
}

export class ClaimRankCall__Inputs {
  _call: ClaimRankCall;

  constructor(call: ClaimRankCall) {
    this._call = call;
  }

  get term(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ClaimRankCall__Outputs {
  _call: ClaimRankCall;

  constructor(call: ClaimRankCall) {
    this._call = call;
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get subtractedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class StakeCall extends ethereum.Call {
  get inputs(): StakeCall__Inputs {
    return new StakeCall__Inputs(this);
  }

  get outputs(): StakeCall__Outputs {
    return new StakeCall__Outputs(this);
  }
}

export class StakeCall__Inputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get term(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class StakeCall__Outputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
